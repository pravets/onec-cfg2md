package main

import (
	"fmt"
	"os"
	"ones-cfg2md/pkg/generator"
	"ones-cfg2md/pkg/model"
	"ones-cfg2md/pkg/parser"
)

func main() {
	fmt.Println("=== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ ===")
	
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
	testResults := make(map[string]int)
	
	// CFG —Ñ–æ—Ä–º–∞—Ç
	fmt.Println("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CFG —Ñ–æ—Ä–º–∞—Ç–∞...")
	cfgParser, err := parser.NewParser("../examples/cfg", model.FormatCFG)
	if err != nil {
		fmt.Printf("‚ùå CFG: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: %v\n", err)
	} else {
		cfgCatalogs, err := cfgParser.ParseCatalogs()
		if err != nil {
			fmt.Printf("‚ùå CFG: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n", err)
		} else {
			testResults["CFG"] = len(cfgCatalogs)
			fmt.Printf("‚úÖ CFG: –Ω–∞–π–¥–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: %d\n", len(cfgCatalogs))
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
			if len(cfgCatalogs) > 0 {
				cat := cfgCatalogs[0]
				fmt.Printf("   –ü—Ä–∏–º–µ—Ä: %s (%s) - %d –∞—Ç—Ä–∏–±—É—Ç–æ–≤, %d –¢–ß\n", 
					cat.Name, cat.Synonym, len(cat.Attributes), len(cat.TabularSections))
			}
		}
	}
	
	// EDT —Ñ–æ—Ä–º–∞—Ç  
	fmt.Println("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EDT —Ñ–æ—Ä–º–∞—Ç–∞...")
	edtParser, err := parser.NewParser("../examples/edt", model.FormatEDT)
	if err != nil {
		fmt.Printf("‚ùå EDT: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: %v\n", err)
	} else {
		edtCatalogs, err := edtParser.ParseCatalogs()
		if err != nil {
			fmt.Printf("‚ùå EDT: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n", err)
		} else {
			testResults["EDT"] = len(edtCatalogs)
			fmt.Printf("‚úÖ EDT: –Ω–∞–π–¥–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: %d\n", len(edtCatalogs))
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
			if len(edtCatalogs) > 0 {
				cat := edtCatalogs[0]
				fmt.Printf("   –ü—Ä–∏–º–µ—Ä: %s (%s) - %d –∞—Ç—Ä–∏–±—É—Ç–æ–≤, %d –¢–ß\n", 
					cat.Name, cat.Synonym, len(cat.Attributes), len(cat.TabularSections))
			}
		}
	}
	
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
	fmt.Println("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
	if cfgParser != nil {
		catalogs, err := cfgParser.ParseCatalogs()
		if err == nil && len(catalogs) > 0 {
			// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
			outputDir := "../test_final_output"
			os.MkdirAll(outputDir, 0755)
			
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º markdown
			mdGen := generator.NewMarkdownGenerator(outputDir)
			if err := mdGen.GenerateFiles(catalogs); err == nil {
				fmt.Println("‚úÖ Markdown —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
			} else {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown: %v\n", err)
			}
			
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
			csvGen := generator.NewCSVGenerator(outputDir)
			if err := csvGen.GenerateCatalog(catalogs); err == nil {
				fmt.Println("‚úÖ CSV –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω")
			} else {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV: %v\n", err)
			}
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
			if entries, err := os.ReadDir(outputDir); err == nil {
				fmt.Printf("   –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(entries))
			}
		}
	}
	
	// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
	fmt.Println("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
	totalCatalogs := 0
	for format, count := range testResults {
		fmt.Printf("%s —Ñ–æ—Ä–º–∞—Ç: %d —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤\n", format, count)
		totalCatalogs += count
	}
	fmt.Printf("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤\n", totalCatalogs)
	
	if totalCatalogs > 0 {
		fmt.Println("üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
	} else {
		fmt.Println("‚ö†Ô∏è  –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏")
	}
}